// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package chibiverse

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChibiverseMetaData contains all meta data concerning the Chibiverse contract.
var ChibiverseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIEVAWAY_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260405180602001604052806000815250600f90805190602001906200002b929190620004d2565b50604051806020016040528060008152506010908051906020019062000053929190620004d2565b506000601260006101000a81548160ff0219169083151502179055503480156200007c57600080fd5b5060405162005ae038038062005ae08339818101604052810190620000a291906200071f565b6040518060400160405280600a81526020017f43686962695665727365000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4348494249000000000000000000000000000000000000000000000000000000815250816000908051906020019062000126929190620004d2565b5080600190805190602001906200013f929190620004d2565b5050506200016262000156620001d960201b60201c565b620001e160201b60201c565b6001600b819055506000600c60006101000a81548160ff0219169083151502179055506200019682620002a760201b60201c565b620001a7816200035260201b60201c565b620001d160405180606001604052806035815260200162005aab60359139620003fd60201b60201c565b50506200088c565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002b7620001d960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002dd620004a860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000336576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032d9062000805565b60405180910390fd5b80600f90805190602001906200034e929190620004d2565b5050565b62000362620001d960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000388620004a860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620003e1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003d89062000805565b60405180910390fd5b8060109080519060200190620003f9929190620004d2565b5050565b6200040d620001d960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000433620004a860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200048c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004839062000805565b60405180910390fd5b8060119080519060200190620004a4929190620004d2565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620004e09062000856565b90600052602060002090601f01602090048101928262000504576000855562000550565b82601f106200051f57805160ff191683800117855562000550565b8280016001018555821562000550579182015b828111156200054f57825182559160200191906001019062000532565b5b5090506200055f919062000563565b5090565b5b808211156200057e57600081600090555060010162000564565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005eb82620005a0565b810181811067ffffffffffffffff821117156200060d576200060c620005b1565b5b80604052505050565b60006200062262000582565b9050620006308282620005e0565b919050565b600067ffffffffffffffff821115620006535762000652620005b1565b5b6200065e82620005a0565b9050602081019050919050565b60005b838110156200068b5780820151818401526020810190506200066e565b838111156200069b576000848401525b50505050565b6000620006b8620006b28462000635565b62000616565b905082815260208101848484011115620006d757620006d66200059b565b5b620006e48482856200066b565b509392505050565b600082601f83011262000704576200070362000596565b5b815162000716848260208601620006a1565b91505092915050565b600080604083850312156200073957620007386200058c565b5b600083015167ffffffffffffffff8111156200075a576200075962000591565b5b6200076885828601620006ec565b925050602083015167ffffffffffffffff8111156200078c576200078b62000591565b5b6200079a85828601620006ec565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620007ed602083620007a4565b9150620007fa82620007b5565b602082019050919050565b600060208201905081810360008301526200082081620007de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200086f57607f821691505b6020821081141562000886576200088562000827565b5b50919050565b61520f806200089c6000396000f3fe6080604052600436106102305760003560e01c80635c975abb1161012e5780638d859f3e116100ab578063b88d4fde1161006f578063b88d4fde146107e2578063c87b56dd1461080b578063d170268314610848578063e985e9c514610873578063f2fde38b146108b057610230565b80638d859f3e1461071c5780638da5cb5b1461074757806395d89b4114610772578063a0712d681461079d578063a22cb465146107b957610230565b806370a08231116100f257806370a082311461065d578063715018a61461069a5780637dd8c8c1146106b15780637ec4a659146106dc5780638456cb591461070557610230565b80635c975abb146105785780635d8e52b7146105a35780636352211e146105cc5780636373a6b11461060957806365ac82301461063457610230565b80633bd64968116101bc578063438b630011610180578063438b6300146104935780634e71d92d146104d05780634f6ccce7146104e75780634fdd43cb14610524578063518302271461054d57610230565b80633bd64968146103e85780633ccfd60b146103ff5780633f4ba83a14610416578063402914f51461042d57806342842e0e1461046a57610230565b806316ba10e01161020357806316ba10e01461030357806318160ddd1461032c57806323b872dd146103575780632f745c59146103805780633750d1dc146103bd57610230565b806301ffc9a71461023557806306fdde0314610272578063081812fc1461029d578063095ea7b3146102da575b600080fd5b34801561024157600080fd5b5061025c600480360381019061025791906136e6565b6108d9565b604051610269919061372e565b60405180910390f35b34801561027e57600080fd5b50610287610953565b60405161029491906137e2565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf919061383a565b6109e5565b6040516102d191906138a8565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc91906138ef565b610a6a565b005b34801561030f57600080fd5b5061032a60048036038101906103259190613a64565b610b82565b005b34801561033857600080fd5b50610341610c18565b60405161034e9190613abc565b60405180910390f35b34801561036357600080fd5b5061037e60048036038101906103799190613ad7565b610c29565b005b34801561038c57600080fd5b506103a760048036038101906103a291906138ef565b610c89565b6040516103b49190613abc565b60405180910390f35b3480156103c957600080fd5b506103d2610d2e565b6040516103df9190613abc565b60405180910390f35b3480156103f457600080fd5b506103fd610d33565b005b34801561040b57600080fd5b50610414610dcc565b005b34801561042257600080fd5b5061042b610f1e565b005b34801561043957600080fd5b50610454600480360381019061044f9190613b2a565b610fa4565b604051610461919061372e565b60405180910390f35b34801561047657600080fd5b50610491600480360381019061048c9190613ad7565b610fc7565b005b34801561049f57600080fd5b506104ba60048036038101906104b59190613b2a565b610fe7565b6040516104c79190613c15565b60405180910390f35b3480156104dc57600080fd5b506104e5611095565b005b3480156104f357600080fd5b5061050e6004803603810190610509919061383a565b6113e0565b60405161051b9190613abc565b60405180910390f35b34801561053057600080fd5b5061054b60048036038101906105469190613a64565b611451565b005b34801561055957600080fd5b506105626114e7565b60405161056f919061372e565b60405180910390f35b34801561058457600080fd5b5061058d6114fa565b60405161059a919061372e565b60405180910390f35b3480156105af57600080fd5b506105ca60048036038101906105c59190613b2a565b611511565b005b3480156105d857600080fd5b506105f360048036038101906105ee919061383a565b6115e3565b60405161060091906138a8565b60405180910390f35b34801561061557600080fd5b5061061e611695565b60405161062b91906137e2565b60405180910390f35b34801561064057600080fd5b5061065b60048036038101906106569190613b2a565b6116b1565b005b34801561066957600080fd5b50610684600480360381019061067f9190613b2a565b611739565b6040516106919190613abc565b60405180910390f35b3480156106a657600080fd5b506106af6117f1565b005b3480156106bd57600080fd5b506106c6611879565b6040516106d39190613abc565b60405180910390f35b3480156106e857600080fd5b5061070360048036038101906106fe9190613a64565b61187e565b005b34801561071157600080fd5b5061071a611914565b005b34801561072857600080fd5b5061073161199a565b60405161073e9190613abc565b60405180910390f35b34801561075357600080fd5b5061075c6119a5565b60405161076991906138a8565b60405180910390f35b34801561077e57600080fd5b506107876119cf565b60405161079491906137e2565b60405180910390f35b6107b760048036038101906107b2919061383a565b611a61565b005b3480156107c557600080fd5b506107e060048036038101906107db9190613c63565b611cdd565b005b3480156107ee57600080fd5b5061080960048036038101906108049190613d44565b611cf3565b005b34801561081757600080fd5b50610832600480360381019061082d919061383a565b611d55565b60405161083f91906137e2565b60405180910390f35b34801561085457600080fd5b5061085d611e89565b60405161086a9190613abc565b60405180910390f35b34801561087f57600080fd5b5061089a60048036038101906108959190613dc7565b611e8e565b6040516108a7919061372e565b60405180910390f35b3480156108bc57600080fd5b506108d760048036038101906108d29190613b2a565b611f22565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061094c575061094b8261201a565b5b9050919050565b60606000805461096290613e36565b80601f016020809104026020016040519081016040528092919081815260200182805461098e90613e36565b80156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b5050505050905090565b60006109f0826120fc565b610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690613eda565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a75826115e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add90613f6c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b05612168565b73ffffffffffffffffffffffffffffffffffffffff161480610b345750610b3381610b2e612168565b611e8e565b5b610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613ffe565b60405180910390fd5b610b7d8383612170565b505050565b610b8a612168565b73ffffffffffffffffffffffffffffffffffffffff16610ba86119a5565b73ffffffffffffffffffffffffffffffffffffffff1614610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf59061406a565b60405180910390fd5b8060109080519060200190610c149291906135d7565b5050565b6000610c24600d612229565b905090565b610c3a610c34612168565b82612237565b610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c70906140fc565b60405180910390fd5b610c84838383612315565b505050565b6000610c9483611739565b8210610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc9061418e565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b606481565b610d3b612168565b73ffffffffffffffffffffffffffffffffffffffff16610d596119a5565b73ffffffffffffffffffffffffffffffffffffffff1614610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da69061406a565b60405180910390fd5b6001601260006101000a81548160ff021916908315150217905550565b6002600b541415610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e09906141fa565b60405180910390fd5b6002600b81905550610e22612168565b73ffffffffffffffffffffffffffffffffffffffff16610e406119a5565b73ffffffffffffffffffffffffffffffffffffffff1614610e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8d9061406a565b60405180910390fd5b6000610ea06119a5565b73ffffffffffffffffffffffffffffffffffffffff1647604051610ec39061424b565b60006040518083038185875af1925050503d8060008114610f00576040519150601f19603f3d011682016040523d82523d6000602084013e610f05565b606091505b5050905080610f1357600080fd5b506001600b81905550565b610f26612168565b73ffffffffffffffffffffffffffffffffffffffff16610f446119a5565b73ffffffffffffffffffffffffffffffffffffffff1614610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f919061406a565b60405180910390fd5b610fa2612571565b565b6000610faf82612613565b8015610fc05750610fbf8261266a565b5b9050919050565b610fe283838360405180602001604052806000815250611cf3565b505050565b60606000610ff483611739565b905060008167ffffffffffffffff81111561101257611011613939565b5b6040519080825280602002602001820160405280156110405781602001602082028036833780820191505090505b50905060005b8281101561108a576110588582610c89565b82828151811061106b5761106a614260565b5b6020026020010181815250508080611082906142be565b915050611046565b508092505050919050565b6002600b5414156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2906141fa565b60405180910390fd5b6002600b819055506110eb612168565b6110f481612613565b611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a90614353565b60405180910390fd5b61114361113e612168565b61266a565b611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906143bf565b60405180910390fd5b600161118c6114fa565b156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c39061442b565b60405180910390fd5b6111d4612168565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123890614497565b60405180910390fd5b60001515611255611250612168565b6126c0565b151514611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e90614503565b60405180910390fd5b6000811180156112a8575060148111155b6112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de9061456f565b60405180910390fd5b6064816112f4600d612229565b6112fe919061458f565b111561133f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133690614631565b60405180910390fd5b6032600161134d600e612229565b611357919061458f565b1115611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f9061469d565b60405180910390fd5b6113aa6113a3612168565b60016126d3565b6113ba6113b5612168565b612713565b6113ca6113c5612168565b61276e565b6113d4600e6127c9565b50506001600b81905550565b60006113ea6127df565b821061142b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114229061472f565b60405180910390fd5b6008828154811061143f5761143e614260565b5b90600052602060002001549050919050565b611459612168565b73ffffffffffffffffffffffffffffffffffffffff166114776119a5565b73ffffffffffffffffffffffffffffffffffffffff16146114cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c49061406a565b60405180910390fd5b80601190805190602001906114e39291906135d7565b5050565b601260009054906101000a900460ff1681565b6000600c60009054906101000a900460ff16905090565b8061151b81612613565b61155a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155190614353565b60405180910390fd5b611562612168565b73ffffffffffffffffffffffffffffffffffffffff166115806119a5565b73ffffffffffffffffffffffffffffffffffffffff16146115d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cd9061406a565b60405180910390fd5b6115df826127ec565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561168c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611683906147c1565b60405180910390fd5b80915050919050565b60405180606001604052806040815260200161519a6040913981565b6116b9612168565b73ffffffffffffffffffffffffffffffffffffffff166116d76119a5565b73ffffffffffffffffffffffffffffffffffffffff161461172d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117249061406a565b60405180910390fd5b61173681612713565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a190614853565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f9612168565b73ffffffffffffffffffffffffffffffffffffffff166118176119a5565b73ffffffffffffffffffffffffffffffffffffffff161461186d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118649061406a565b60405180910390fd5b6118776000612847565b565b603281565b611886612168565b73ffffffffffffffffffffffffffffffffffffffff166118a46119a5565b73ffffffffffffffffffffffffffffffffffffffff16146118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f19061406a565b60405180910390fd5b80600f90805190602001906119109291906135d7565b5050565b61191c612168565b73ffffffffffffffffffffffffffffffffffffffff1661193a6119a5565b73ffffffffffffffffffffffffffffffffffffffff1614611990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119879061406a565b60405180910390fd5b61199861290d565b565b661550f7dca7000081565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119de90613e36565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0a90613e36565b8015611a575780601f10611a2c57610100808354040283529160200191611a57565b820191906000526020600020905b815481529060010190602001808311611a3a57829003601f168201915b5050505050905090565b6002600b541415611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e906141fa565b60405180910390fd5b6002600b8190555080611ab86114fa565b15611af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aef9061442b565b60405180910390fd5b611b00612168565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6490614497565b60405180910390fd5b60001515611b81611b7c612168565b6126c0565b151514611bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bba90614503565b60405180910390fd5b600081118015611bd4575060148111155b611c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0a9061456f565b60405180910390fd5b606481611c20600d612229565b611c2a919061458f565b1115611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6290614631565b60405180910390fd5b81661550f7dca70000611c7e9190614873565b341015611cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb790614919565b60405180910390fd5b611cd1611ccb612168565b836126d3565b506001600b8190555050565b611cef611ce8612168565b83836129b0565b5050565b611d04611cfe612168565b83612237565b611d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3a906140fc565b60405180910390fd5b611d4f84848484612b1d565b50505050565b6060611d60826120fc565b611d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d96906149ab565b60405180910390fd5b60001515601260009054906101000a900460ff1615151415611e4d5760118054611dc890613e36565b80601f0160208091040260200160405190810160405280929190818152602001828054611df490613e36565b8015611e415780601f10611e1657610100808354040283529160200191611e41565b820191906000526020600020905b815481529060010190602001808311611e2457829003601f168201915b50505050509050611e84565b611e55612b79565b611e5e83612c0b565b6010604051602001611e7293929190614a9b565b60405160208183030381529060405290505b919050565b601481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611f2a612168565b73ffffffffffffffffffffffffffffffffffffffff16611f486119a5565b73ffffffffffffffffffffffffffffffffffffffff1614611f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f959061406a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561200e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200590614b3e565b60405180910390fd5b61201781612847565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806120e557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806120f557506120f482612d6c565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166121e3836115e3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000612242826120fc565b612281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227890614bd0565b60405180910390fd5b600061228c836115e3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806122fb57508373ffffffffffffffffffffffffffffffffffffffff166122e3846109e5565b73ffffffffffffffffffffffffffffffffffffffff16145b8061230c575061230b8185611e8e565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612335826115e3565b73ffffffffffffffffffffffffffffffffffffffff161461238b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238290614c62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f290614cf4565b60405180910390fd5b612406838383612dd6565b612411600082612170565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124619190614d14565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124b8919061458f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6125796114fa565b6125b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125af90614d94565b60405180910390fd5b6000600c60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125fc612168565b60405161260991906138a8565b60405180910390a1565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050919050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080823b905060008111915050919050565b60005b8181101561270e576126e8600d6127c9565b6126fb836126f6600d612229565b612eea565b8080612706906142be565b9150506126d6565b505050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001816000016000828254019250508190555050565b6000600880549050905090565b6001601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6129156114fa565b15612955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294c90614e00565b60405180910390fd5b6001600c60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612999612168565b6040516129a691906138a8565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1690614e6c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612b10919061372e565b60405180910390a3505050565b612b28848484612315565b612b3484848484612f08565b612b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6a90614efe565b60405180910390fd5b50505050565b6060600f8054612b8890613e36565b80601f0160208091040260200160405190810160405280929190818152602001828054612bb490613e36565b8015612c015780601f10612bd657610100808354040283529160200191612c01565b820191906000526020600020905b815481529060010190602001808311612be457829003601f168201915b5050505050905090565b60606000821415612c53576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612d67565b600082905060005b60008214612c85578080612c6e906142be565b915050600a82612c7e9190614f4d565b9150612c5b565b60008167ffffffffffffffff811115612ca157612ca0613939565b5b6040519080825280601f01601f191660200182016040528015612cd35781602001600182028036833780820191505090505b5090505b60008514612d6057600182612cec9190614d14565b9150600a85612cfb9190614f7e565b6030612d07919061458f565b60f81b818381518110612d1d57612d1c614260565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612d599190614f4d565b9450612cd7565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612de1838383613090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612e2457612e1f81613095565b612e63565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612e6257612e6183826130de565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ea657612ea18161324b565b612ee5565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ee457612ee3828261331c565b5b5b505050565b612f0482826040518060200160405280600081525061339b565b5050565b6000612f298473ffffffffffffffffffffffffffffffffffffffff166133f6565b15613083578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f52612168565b8786866040518563ffffffff1660e01b8152600401612f749493929190615004565b6020604051808303816000875af1925050508015612fb057506040513d601f19601f82011682018060405250810190612fad9190615065565b60015b613033573d8060008114612fe0576040519150601f19603f3d011682016040523d82523d6000602084013e612fe5565b606091505b5060008151141561302b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302290614efe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613088565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016130eb84611739565b6130f59190614d14565b90506000600760008481526020019081526020016000205490508181146131da576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061325f9190614d14565b905060006009600084815260200190815260200160002054905060006008838154811061328f5761328e614260565b5b9060005260206000200154905080600883815481106132b1576132b0614260565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613300576132ff615092565b5b6001900381819060005260206000200160009055905550505050565b600061332783611739565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6133a58383613409565b6133b26000848484612f08565b6133f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e890614efe565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613479576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134709061510d565b60405180910390fd5b613482816120fc565b156134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b990615179565b60405180910390fd5b6134ce60008383612dd6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461351e919061458f565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8280546135e390613e36565b90600052602060002090601f016020900481019282613605576000855561364c565b82601f1061361e57805160ff191683800117855561364c565b8280016001018555821561364c579182015b8281111561364b578251825591602001919060010190613630565b5b509050613659919061365d565b5090565b5b8082111561367657600081600090555060010161365e565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136c38161368e565b81146136ce57600080fd5b50565b6000813590506136e0816136ba565b92915050565b6000602082840312156136fc576136fb613684565b5b600061370a848285016136d1565b91505092915050565b60008115159050919050565b61372881613713565b82525050565b6000602082019050613743600083018461371f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613783578082015181840152602081019050613768565b83811115613792576000848401525b50505050565b6000601f19601f8301169050919050565b60006137b482613749565b6137be8185613754565b93506137ce818560208601613765565b6137d781613798565b840191505092915050565b600060208201905081810360008301526137fc81846137a9565b905092915050565b6000819050919050565b61381781613804565b811461382257600080fd5b50565b6000813590506138348161380e565b92915050565b6000602082840312156138505761384f613684565b5b600061385e84828501613825565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061389282613867565b9050919050565b6138a281613887565b82525050565b60006020820190506138bd6000830184613899565b92915050565b6138cc81613887565b81146138d757600080fd5b50565b6000813590506138e9816138c3565b92915050565b6000806040838503121561390657613905613684565b5b6000613914858286016138da565b925050602061392585828601613825565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61397182613798565b810181811067ffffffffffffffff821117156139905761398f613939565b5b80604052505050565b60006139a361367a565b90506139af8282613968565b919050565b600067ffffffffffffffff8211156139cf576139ce613939565b5b6139d882613798565b9050602081019050919050565b82818337600083830152505050565b6000613a07613a02846139b4565b613999565b905082815260208101848484011115613a2357613a22613934565b5b613a2e8482856139e5565b509392505050565b600082601f830112613a4b57613a4a61392f565b5b8135613a5b8482602086016139f4565b91505092915050565b600060208284031215613a7a57613a79613684565b5b600082013567ffffffffffffffff811115613a9857613a97613689565b5b613aa484828501613a36565b91505092915050565b613ab681613804565b82525050565b6000602082019050613ad16000830184613aad565b92915050565b600080600060608486031215613af057613aef613684565b5b6000613afe868287016138da565b9350506020613b0f868287016138da565b9250506040613b2086828701613825565b9150509250925092565b600060208284031215613b4057613b3f613684565b5b6000613b4e848285016138da565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b8c81613804565b82525050565b6000613b9e8383613b83565b60208301905092915050565b6000602082019050919050565b6000613bc282613b57565b613bcc8185613b62565b9350613bd783613b73565b8060005b83811015613c08578151613bef8882613b92565b9750613bfa83613baa565b925050600181019050613bdb565b5085935050505092915050565b60006020820190508181036000830152613c2f8184613bb7565b905092915050565b613c4081613713565b8114613c4b57600080fd5b50565b600081359050613c5d81613c37565b92915050565b60008060408385031215613c7a57613c79613684565b5b6000613c88858286016138da565b9250506020613c9985828601613c4e565b9150509250929050565b600067ffffffffffffffff821115613cbe57613cbd613939565b5b613cc782613798565b9050602081019050919050565b6000613ce7613ce284613ca3565b613999565b905082815260208101848484011115613d0357613d02613934565b5b613d0e8482856139e5565b509392505050565b600082601f830112613d2b57613d2a61392f565b5b8135613d3b848260208601613cd4565b91505092915050565b60008060008060808587031215613d5e57613d5d613684565b5b6000613d6c878288016138da565b9450506020613d7d878288016138da565b9350506040613d8e87828801613825565b925050606085013567ffffffffffffffff811115613daf57613dae613689565b5b613dbb87828801613d16565b91505092959194509250565b60008060408385031215613dde57613ddd613684565b5b6000613dec858286016138da565b9250506020613dfd858286016138da565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613e4e57607f821691505b60208210811415613e6257613e61613e07565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613ec4602c83613754565b9150613ecf82613e68565b604082019050919050565b60006020820190508181036000830152613ef381613eb7565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f56602183613754565b9150613f6182613efa565b604082019050919050565b60006020820190508181036000830152613f8581613f49565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613fe8603883613754565b9150613ff382613f8c565b604082019050919050565b6000602082019050818103600083015261401781613fdb565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614054602083613754565b915061405f8261401e565b602082019050919050565b6000602082019050818103600083015261408381614047565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006140e6603183613754565b91506140f18261408a565b604082019050919050565b60006020820190508181036000830152614115816140d9565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000614178602b83613754565b91506141838261411c565b604082019050919050565b600060208201905081810360008301526141a78161416b565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006141e4601f83613754565b91506141ef826141ae565b602082019050919050565b60006020820190508181036000830152614213816141d7565b9050919050565b600081905092915050565b50565b600061423560008361421a565b915061424082614225565b600082019050919050565b600061425682614228565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142c982613804565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142fc576142fb61428f565b5b600182019050919050565b7f446f6e277420636c61696d20616761696e210000000000000000000000000000600082015250565b600061433d601283613754565b915061434882614307565b602082019050919050565b6000602082019050818103600083015261436c81614330565b9050919050565b7f4f6e6c79206769766561776179206c6973746564210000000000000000000000600082015250565b60006143a9601583613754565b91506143b482614373565b602082019050919050565b600060208201905081810360008301526143d88161439c565b9050919050565b7f54686520636f6e74726163742069732070617573656421000000000000000000600082015250565b6000614415601783613754565b9150614420826143df565b602082019050919050565b6000602082019050818103600083015261444481614408565b9050919050565b7f436f6e747261637473206e6f7420616c6c6f7765640000000000000000000000600082015250565b6000614481601583613754565b915061448c8261444b565b602082019050919050565b600060208201905081810360008301526144b081614474565b9050919050565b7f43616e6e6f74206d696e742066726f6d206120636f6e74726163740000000000600082015250565b60006144ed601b83613754565b91506144f8826144b7565b602082019050919050565b6000602082019050818103600083015261451c816144e0565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b6000614559601483613754565b915061456482614523565b602082019050919050565b600060208201905081810360008301526145888161454c565b9050919050565b600061459a82613804565b91506145a583613804565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145da576145d961428f565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b600061461b601483613754565b9150614626826145e5565b602082019050919050565b6000602082019050818103600083015261464a8161460e565b9050919050565b7f4d617820676965766177617920737570706c7920657863656564656421000000600082015250565b6000614687601d83613754565b915061469282614651565b602082019050919050565b600060208201905081810360008301526146b68161467a565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614719602c83613754565b9150614724826146bd565b604082019050919050565b600060208201905081810360008301526147488161470c565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006147ab602983613754565b91506147b68261474f565b604082019050919050565b600060208201905081810360008301526147da8161479e565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061483d602a83613754565b9150614848826147e1565b604082019050919050565b6000602082019050818103600083015261486c81614830565b9050919050565b600061487e82613804565b915061488983613804565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148c2576148c161428f565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b6000614903601383613754565b915061490e826148cd565b602082019050919050565b60006020820190508181036000830152614932816148f6565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000614995602f83613754565b91506149a082614939565b604082019050919050565b600060208201905081810360008301526149c481614988565b9050919050565b600081905092915050565b60006149e182613749565b6149eb81856149cb565b93506149fb818560208601613765565b80840191505092915050565b60008190508160005260206000209050919050565b60008154614a2981613e36565b614a3381866149cb565b94506001821660008114614a4e5760018114614a5f57614a92565b60ff19831686528186019350614a92565b614a6885614a07565b60005b83811015614a8a57815481890152600182019150602081019050614a6b565b838801955050505b50505092915050565b6000614aa782866149d6565b9150614ab382856149d6565b9150614abf8284614a1c565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614b28602683613754565b9150614b3382614acc565b604082019050919050565b60006020820190508181036000830152614b5781614b1b565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614bba602c83613754565b9150614bc582614b5e565b604082019050919050565b60006020820190508181036000830152614be981614bad565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614c4c602983613754565b9150614c5782614bf0565b604082019050919050565b60006020820190508181036000830152614c7b81614c3f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614cde602483613754565b9150614ce982614c82565b604082019050919050565b60006020820190508181036000830152614d0d81614cd1565b9050919050565b6000614d1f82613804565b9150614d2a83613804565b925082821015614d3d57614d3c61428f565b5b828203905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614d7e601483613754565b9150614d8982614d48565b602082019050919050565b60006020820190508181036000830152614dad81614d71565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614dea601083613754565b9150614df582614db4565b602082019050919050565b60006020820190508181036000830152614e1981614ddd565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614e56601983613754565b9150614e6182614e20565b602082019050919050565b60006020820190508181036000830152614e8581614e49565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614ee8603283613754565b9150614ef382614e8c565b604082019050919050565b60006020820190508181036000830152614f1781614edb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f5882613804565b9150614f6383613804565b925082614f7357614f72614f1e565b5b828204905092915050565b6000614f8982613804565b9150614f9483613804565b925082614fa457614fa3614f1e565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000614fd682614faf565b614fe08185614fba565b9350614ff0818560208601613765565b614ff981613798565b840191505092915050565b60006080820190506150196000830187613899565b6150266020830186613899565b6150336040830185613aad565b81810360608301526150458184614fcb565b905095945050505050565b60008151905061505f816136ba565b92915050565b60006020828403121561507b5761507a613684565b5b600061508984828501615050565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006150f7602083613754565b9150615102826150c1565b602082019050919050565b60006020820190508181036000830152615126816150ea565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615163601c83613754565b915061516e8261512d565b602082019050919050565b6000602082019050818103600083015261519281615156565b905091905056fe31633936656332343661386463373034383666653933373438633335636539376232323639626134626661626539633831643665333833356363326436656364a2646970667358221220cb493d856575ec6ae8be8c649d7a8c3753675f93b9f15288adba3b62247c529664736f6c634300080a0033697066733a2f2f516d4e733372326e31544d436233386639593562455457676d76534a78313568394d4857594275626a3835666a51",
}

// ChibiverseABI is the input ABI used to generate the binding from.
// Deprecated: Use ChibiverseMetaData.ABI instead.
var ChibiverseABI = ChibiverseMetaData.ABI

// ChibiverseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChibiverseMetaData.Bin instead.
var ChibiverseBin = ChibiverseMetaData.Bin

// DeployChibiverse deploys a new Ethereum contract, binding an instance of Chibiverse to it.
func DeployChibiverse(auth *bind.TransactOpts, backend bind.ContractBackend, _uriPrefix string, _uriSuffix string) (common.Address, *types.Transaction, *Chibiverse, error) {
	parsed, err := ChibiverseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChibiverseBin), backend, _uriPrefix, _uriSuffix)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// Chibiverse is an auto generated Go binding around an Ethereum contract.
type Chibiverse struct {
	ChibiverseCaller     // Read-only binding to the contract
	ChibiverseTransactor // Write-only binding to the contract
	ChibiverseFilterer   // Log filterer for contract events
}

// ChibiverseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChibiverseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChibiverseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChibiverseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChibiverseSession struct {
	Contract     *Chibiverse       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChibiverseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChibiverseCallerSession struct {
	Contract *ChibiverseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ChibiverseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChibiverseTransactorSession struct {
	Contract     *ChibiverseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ChibiverseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChibiverseRaw struct {
	Contract *Chibiverse // Generic contract binding to access the raw methods on
}

// ChibiverseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChibiverseCallerRaw struct {
	Contract *ChibiverseCaller // Generic read-only contract binding to access the raw methods on
}

// ChibiverseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChibiverseTransactorRaw struct {
	Contract *ChibiverseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChibiverse creates a new instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverse(address common.Address, backend bind.ContractBackend) (*Chibiverse, error) {
	contract, err := bindChibiverse(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// NewChibiverseCaller creates a new read-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseCaller(address common.Address, caller bind.ContractCaller) (*ChibiverseCaller, error) {
	contract, err := bindChibiverse(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseCaller{contract: contract}, nil
}

// NewChibiverseTransactor creates a new write-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseTransactor(address common.Address, transactor bind.ContractTransactor) (*ChibiverseTransactor, error) {
	contract, err := bindChibiverse(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransactor{contract: contract}, nil
}

// NewChibiverseFilterer creates a new log filterer instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseFilterer(address common.Address, filterer bind.ContractFilterer) (*ChibiverseFilterer, error) {
	contract, err := bindChibiverse(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChibiverseFilterer{contract: contract}, nil
}

// bindChibiverse binds a generic wrapper to an already deployed contract.
func bindChibiverse(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChibiverseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.ChibiverseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transact(opts, method, params...)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) GIEVAWAYRESERVE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "GIEVAWAY_RESERVE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBI(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBIPURCHASE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI_PURCHASE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) PRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) PRICE() (*big.Int, error) {
	return _Chibiverse.Contract.PRICE(&_Chibiverse.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) PRICE() (*big.Int, error) {
	return _Chibiverse.Contract.PRICE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCaller) PROVENANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "PROVENANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCaller) Claimable(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "claimable", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCallerSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Revealed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "revealed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenURI", _tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCaller) WalletOfOwner(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "walletOfOwner", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCallerSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) AddToGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "addToGiveawayList", _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactorSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactor) Mint(opts *bind.TransactOpts, _mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "mint", _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactorSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) RemoveGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "removeGiveawayList", _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactor) SetHiddenMetadataUri(opts *bind.TransactOpts, _hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setHiddenMetadataUri", _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactor) SetRevealed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setRevealed")
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactorSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriPrefix(opts *bind.TransactOpts, _uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriPrefix", _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriSuffix(opts *bind.TransactOpts, _uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriSuffix", _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// ChibiverseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Chibiverse contract.
type ChibiverseApprovalIterator struct {
	Event *ChibiverseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApproval represents a Approval event raised by the Chibiverse contract.
type ChibiverseApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ChibiverseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalIterator{contract: _Chibiverse.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ChibiverseApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApproval)
				if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseApproval(log types.Log) (*ChibiverseApproval, error) {
	event := new(ChibiverseApproval)
	if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Chibiverse contract.
type ChibiverseApprovalForAllIterator struct {
	Event *ChibiverseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApprovalForAll represents a ApprovalForAll event raised by the Chibiverse contract.
type ChibiverseApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ChibiverseApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalForAllIterator{contract: _Chibiverse.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ChibiverseApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApprovalForAll)
				if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) ParseApprovalForAll(log types.Log) (*ChibiverseApprovalForAll, error) {
	event := new(ChibiverseApprovalForAll)
	if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Chibiverse contract.
type ChibiverseOwnershipTransferredIterator struct {
	Event *ChibiverseOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseOwnershipTransferred represents a OwnershipTransferred event raised by the Chibiverse contract.
type ChibiverseOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ChibiverseOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseOwnershipTransferredIterator{contract: _Chibiverse.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ChibiverseOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseOwnershipTransferred)
				if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) ParseOwnershipTransferred(log types.Log) (*ChibiverseOwnershipTransferred, error) {
	event := new(ChibiverseOwnershipTransferred)
	if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiversePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Chibiverse contract.
type ChibiversePausedIterator struct {
	Event *ChibiversePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiversePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiversePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiversePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiversePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiversePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiversePaused represents a Paused event raised by the Chibiverse contract.
type ChibiversePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterPaused(opts *bind.FilterOpts) (*ChibiversePausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ChibiversePausedIterator{contract: _Chibiverse.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ChibiversePaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiversePaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) ParsePaused(log types.Log) (*ChibiversePaused, error) {
	event := new(ChibiversePaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Chibiverse contract.
type ChibiverseTransferIterator struct {
	Event *ChibiverseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseTransfer represents a Transfer event raised by the Chibiverse contract.
type ChibiverseTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ChibiverseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransferIterator{contract: _Chibiverse.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ChibiverseTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseTransfer)
				if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseTransfer(log types.Log) (*ChibiverseTransfer, error) {
	event := new(ChibiverseTransfer)
	if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Chibiverse contract.
type ChibiverseUnpausedIterator struct {
	Event *ChibiverseUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseUnpaused represents a Unpaused event raised by the Chibiverse contract.
type ChibiverseUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ChibiverseUnpausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ChibiverseUnpausedIterator{contract: _Chibiverse.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ChibiverseUnpaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseUnpaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) ParseUnpaused(log types.Log) (*ChibiverseUnpaused, error) {
	event := new(ChibiverseUnpaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
