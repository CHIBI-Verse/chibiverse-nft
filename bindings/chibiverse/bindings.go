// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package chibiverse

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChibiverseMetaData contains all meta data concerning the Chibiverse contract.
var ChibiverseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIEVAWAY_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260405180602001604052806000815250600f90805190602001906200002b929190620004ee565b50604051806020016040528060008152506010908051906020019062000053929190620004ee565b506000601260006101000a81548160ff0219169083151502179055503480156200007c57600080fd5b5060405162005a7e38038062005a7e8339818101604052810190620000a291906200073b565b6040518060400160405280600a81526020017f43686962695665727365000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4348494249000000000000000000000000000000000000000000000000000000815250816000908051906020019062000126929190620004ee565b5080600190805190602001906200013f929190620004ee565b5050506200016262000156620001f560201b60201c565b620001fd60201b60201c565b6001600b819055506000600c60006101000a81548160ff0219169083151502179055506200019682620002c360201b60201c565b620001a7816200036e60201b60201c565b620001ed6040518060400160405280601581526020017f697066733a2f2f5f5f4349445f5f2f68696464656e00000000000000000000008152506200041960201b60201c565b5050620008a8565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002d3620001f560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002f9620004c460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003499062000821565b60405180910390fd5b80600f90805190602001906200036a929190620004ee565b5050565b6200037e620001f560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003a4620004c460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620003fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003f49062000821565b60405180910390fd5b806010908051906020019062000415929190620004ee565b5050565b62000429620001f560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200044f620004c460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200049f9062000821565b60405180910390fd5b8060119080519060200190620004c0929190620004ee565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620004fc9062000872565b90600052602060002090601f0160209004810192826200052057600085556200056c565b82601f106200053b57805160ff19168380011785556200056c565b828001600101855582156200056c579182015b828111156200056b5782518255916020019190600101906200054e565b5b5090506200057b91906200057f565b5090565b5b808211156200059a57600081600090555060010162000580565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200060782620005bc565b810181811067ffffffffffffffff82111715620006295762000628620005cd565b5b80604052505050565b60006200063e6200059e565b90506200064c8282620005fc565b919050565b600067ffffffffffffffff8211156200066f576200066e620005cd565b5b6200067a82620005bc565b9050602081019050919050565b60005b83811015620006a75780820151818401526020810190506200068a565b83811115620006b7576000848401525b50505050565b6000620006d4620006ce8462000651565b62000632565b905082815260208101848484011115620006f357620006f2620005b7565b5b6200070084828562000687565b509392505050565b600082601f83011262000720576200071f620005b2565b5b815162000732848260208601620006bd565b91505092915050565b60008060408385031215620007555762000754620005a8565b5b600083015167ffffffffffffffff811115620007765762000775620005ad565b5b620007848582860162000708565b925050602083015167ffffffffffffffff811115620007a857620007a7620005ad565b5b620007b68582860162000708565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000809602083620007c0565b91506200081682620007d1565b602082019050919050565b600060208201905081810360008301526200083c81620007fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200088b57607f821691505b60208210811415620008a257620008a162000843565b5b50919050565b6151c680620008b86000396000f3fe6080604052600436106102305760003560e01c80635c975abb1161012e5780638d859f3e116100ab578063b88d4fde1161006f578063b88d4fde146107e2578063c87b56dd1461080b578063d170268314610848578063e985e9c514610873578063f2fde38b146108b057610230565b80638d859f3e1461071c5780638da5cb5b1461074757806395d89b4114610772578063a0712d681461079d578063a22cb465146107b957610230565b806370a08231116100f257806370a082311461065d578063715018a61461069a5780637dd8c8c1146106b15780637ec4a659146106dc5780638456cb591461070557610230565b80635c975abb146105785780635d8e52b7146105a35780636352211e146105cc5780636373a6b11461060957806365ac82301461063457610230565b80633bd64968116101bc578063438b630011610180578063438b6300146104935780634e71d92d146104d05780634f6ccce7146104e75780634fdd43cb14610524578063518302271461054d57610230565b80633bd64968146103e85780633ccfd60b146103ff5780633f4ba83a14610416578063402914f51461042d57806342842e0e1461046a57610230565b806316ba10e01161020357806316ba10e01461030357806318160ddd1461032c57806323b872dd146103575780632f745c59146103805780633750d1dc146103bd57610230565b806301ffc9a71461023557806306fdde0314610272578063081812fc1461029d578063095ea7b3146102da575b600080fd5b34801561024157600080fd5b5061025c600480360381019061025791906136dd565b6108d9565b6040516102699190613725565b60405180910390f35b34801561027e57600080fd5b50610287610953565b60405161029491906137d9565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf9190613831565b6109e5565b6040516102d1919061389f565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc91906138e6565b610a6a565b005b34801561030f57600080fd5b5061032a60048036038101906103259190613a5b565b610b82565b005b34801561033857600080fd5b50610341610c18565b60405161034e9190613ab3565b60405180910390f35b34801561036357600080fd5b5061037e60048036038101906103799190613ace565b610c29565b005b34801561038c57600080fd5b506103a760048036038101906103a291906138e6565b610c89565b6040516103b49190613ab3565b60405180910390f35b3480156103c957600080fd5b506103d2610d2e565b6040516103df9190613ab3565b60405180910390f35b3480156103f457600080fd5b506103fd610d33565b005b34801561040b57600080fd5b50610414610dcc565b005b34801561042257600080fd5b5061042b610f1e565b005b34801561043957600080fd5b50610454600480360381019061044f9190613b21565b610fa4565b6040516104619190613725565b60405180910390f35b34801561047657600080fd5b50610491600480360381019061048c9190613ace565b610fc7565b005b34801561049f57600080fd5b506104ba60048036038101906104b59190613b21565b610fe7565b6040516104c79190613c0c565b60405180910390f35b3480156104dc57600080fd5b506104e5611095565b005b3480156104f357600080fd5b5061050e60048036038101906105099190613831565b6113e0565b60405161051b9190613ab3565b60405180910390f35b34801561053057600080fd5b5061054b60048036038101906105469190613a5b565b611451565b005b34801561055957600080fd5b506105626114e7565b60405161056f9190613725565b60405180910390f35b34801561058457600080fd5b5061058d6114fa565b60405161059a9190613725565b60405180910390f35b3480156105af57600080fd5b506105ca60048036038101906105c59190613b21565b611511565b005b3480156105d857600080fd5b506105f360048036038101906105ee9190613831565b6115e3565b604051610600919061389f565b60405180910390f35b34801561061557600080fd5b5061061e611695565b60405161062b91906137d9565b60405180910390f35b34801561064057600080fd5b5061065b60048036038101906106569190613b21565b6116a8565b005b34801561066957600080fd5b50610684600480360381019061067f9190613b21565b611730565b6040516106919190613ab3565b60405180910390f35b3480156106a657600080fd5b506106af6117e8565b005b3480156106bd57600080fd5b506106c6611870565b6040516106d39190613ab3565b60405180910390f35b3480156106e857600080fd5b5061070360048036038101906106fe9190613a5b565b611875565b005b34801561071157600080fd5b5061071a61190b565b005b34801561072857600080fd5b50610731611991565b60405161073e9190613ab3565b60405180910390f35b34801561075357600080fd5b5061075c61199c565b604051610769919061389f565b60405180910390f35b34801561077e57600080fd5b506107876119c6565b60405161079491906137d9565b60405180910390f35b6107b760048036038101906107b29190613831565b611a58565b005b3480156107c557600080fd5b506107e060048036038101906107db9190613c5a565b611cd4565b005b3480156107ee57600080fd5b5061080960048036038101906108049190613d3b565b611cea565b005b34801561081757600080fd5b50610832600480360381019061082d9190613831565b611d4c565b60405161083f91906137d9565b60405180910390f35b34801561085457600080fd5b5061085d611e80565b60405161086a9190613ab3565b60405180910390f35b34801561087f57600080fd5b5061089a60048036038101906108959190613dbe565b611e85565b6040516108a79190613725565b60405180910390f35b3480156108bc57600080fd5b506108d760048036038101906108d29190613b21565b611f19565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061094c575061094b82612011565b5b9050919050565b60606000805461096290613e2d565b80601f016020809104026020016040519081016040528092919081815260200182805461098e90613e2d565b80156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b5050505050905090565b60006109f0826120f3565b610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690613ed1565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a75826115e3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add90613f63565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b0561215f565b73ffffffffffffffffffffffffffffffffffffffff161480610b345750610b3381610b2e61215f565b611e85565b5b610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90613ff5565b60405180910390fd5b610b7d8383612167565b505050565b610b8a61215f565b73ffffffffffffffffffffffffffffffffffffffff16610ba861199c565b73ffffffffffffffffffffffffffffffffffffffff1614610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590614061565b60405180910390fd5b8060109080519060200190610c149291906135ce565b5050565b6000610c24600d612220565b905090565b610c3a610c3461215f565b8261222e565b610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c70906140f3565b60405180910390fd5b610c8483838361230c565b505050565b6000610c9483611730565b8210610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90614185565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b606481565b610d3b61215f565b73ffffffffffffffffffffffffffffffffffffffff16610d5961199c565b73ffffffffffffffffffffffffffffffffffffffff1614610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690614061565b60405180910390fd5b6001601260006101000a81548160ff021916908315150217905550565b6002600b541415610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e09906141f1565b60405180910390fd5b6002600b81905550610e2261215f565b73ffffffffffffffffffffffffffffffffffffffff16610e4061199c565b73ffffffffffffffffffffffffffffffffffffffff1614610e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8d90614061565b60405180910390fd5b6000610ea061199c565b73ffffffffffffffffffffffffffffffffffffffff1647604051610ec390614242565b60006040518083038185875af1925050503d8060008114610f00576040519150601f19603f3d011682016040523d82523d6000602084013e610f05565b606091505b5050905080610f1357600080fd5b506001600b81905550565b610f2661215f565b73ffffffffffffffffffffffffffffffffffffffff16610f4461199c565b73ffffffffffffffffffffffffffffffffffffffff1614610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9190614061565b60405180910390fd5b610fa2612568565b565b6000610faf8261260a565b8015610fc05750610fbf82612661565b5b9050919050565b610fe283838360405180602001604052806000815250611cea565b505050565b60606000610ff483611730565b905060008167ffffffffffffffff81111561101257611011613930565b5b6040519080825280602002602001820160405280156110405781602001602082028036833780820191505090505b50905060005b8281101561108a576110588582610c89565b82828151811061106b5761106a614257565b5b6020026020010181815250508080611082906142b5565b915050611046565b508092505050919050565b6002600b5414156110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d2906141f1565b60405180910390fd5b6002600b819055506110eb61215f565b6110f48161260a565b611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a9061434a565b60405180910390fd5b61114361113e61215f565b612661565b611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906143b6565b60405180910390fd5b600161118c6114fa565b156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390614422565b60405180910390fd5b6111d461215f565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611241576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112389061448e565b60405180910390fd5b6000151561125561125061215f565b6126b7565b151514611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e906144fa565b60405180910390fd5b6000811180156112a8575060148111155b6112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de90614566565b60405180910390fd5b6064816112f4600d612220565b6112fe9190614586565b111561133f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133690614628565b60405180910390fd5b6032600161134d600e612220565b6113579190614586565b1115611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f90614694565b60405180910390fd5b6113aa6113a361215f565b60016126ca565b6113ba6113b561215f565b61270a565b6113ca6113c561215f565b612765565b6113d4600e6127c0565b50506001600b81905550565b60006113ea6127d6565b821061142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142290614726565b60405180910390fd5b6008828154811061143f5761143e614257565b5b90600052602060002001549050919050565b61145961215f565b73ffffffffffffffffffffffffffffffffffffffff1661147761199c565b73ffffffffffffffffffffffffffffffffffffffff16146114cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c490614061565b60405180910390fd5b80601190805190602001906114e39291906135ce565b5050565b601260009054906101000a900460ff1681565b6000600c60009054906101000a900460ff16905090565b8061151b8161260a565b61155a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115519061434a565b60405180910390fd5b61156261215f565b73ffffffffffffffffffffffffffffffffffffffff1661158061199c565b73ffffffffffffffffffffffffffffffffffffffff16146115d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cd90614061565b60405180910390fd5b6115df826127e3565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561168c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611683906147b8565b60405180910390fd5b80915050919050565b6040518060200160405280600081525081565b6116b061215f565b73ffffffffffffffffffffffffffffffffffffffff166116ce61199c565b73ffffffffffffffffffffffffffffffffffffffff1614611724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171b90614061565b60405180910390fd5b61172d8161270a565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117989061484a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f061215f565b73ffffffffffffffffffffffffffffffffffffffff1661180e61199c565b73ffffffffffffffffffffffffffffffffffffffff1614611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185b90614061565b60405180910390fd5b61186e600061283e565b565b603281565b61187d61215f565b73ffffffffffffffffffffffffffffffffffffffff1661189b61199c565b73ffffffffffffffffffffffffffffffffffffffff16146118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e890614061565b60405180910390fd5b80600f90805190602001906119079291906135ce565b5050565b61191361215f565b73ffffffffffffffffffffffffffffffffffffffff1661193161199c565b73ffffffffffffffffffffffffffffffffffffffff1614611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e90614061565b60405180910390fd5b61198f612904565b565b661550f7dca7000081565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119d590613e2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0190613e2d565b8015611a4e5780601f10611a2357610100808354040283529160200191611a4e565b820191906000526020600020905b815481529060010190602001808311611a3157829003601f168201915b5050505050905090565b6002600b541415611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a95906141f1565b60405180910390fd5b6002600b8190555080611aaf6114fa565b15611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae690614422565b60405180910390fd5b611af761215f565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5b9061448e565b60405180910390fd5b60001515611b78611b7361215f565b6126b7565b151514611bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb1906144fa565b60405180910390fd5b600081118015611bcb575060148111155b611c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0190614566565b60405180910390fd5b606481611c17600d612220565b611c219190614586565b1115611c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5990614628565b60405180910390fd5b81661550f7dca70000611c75919061486a565b341015611cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cae90614910565b60405180910390fd5b611cc8611cc261215f565b836126ca565b506001600b8190555050565b611ce6611cdf61215f565b83836129a7565b5050565b611cfb611cf561215f565b8361222e565b611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d31906140f3565b60405180910390fd5b611d4684848484612b14565b50505050565b6060611d57826120f3565b611d96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8d906149a2565b60405180910390fd5b60001515601260009054906101000a900460ff1615151415611e445760118054611dbf90613e2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611deb90613e2d565b8015611e385780601f10611e0d57610100808354040283529160200191611e38565b820191906000526020600020905b815481529060010190602001808311611e1b57829003601f168201915b50505050509050611e7b565b611e4c612b70565b611e5583612c02565b6010604051602001611e6993929190614a92565b60405160208183030381529060405290505b919050565b601481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611f2161215f565b73ffffffffffffffffffffffffffffffffffffffff16611f3f61199c565b73ffffffffffffffffffffffffffffffffffffffff1614611f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8c90614061565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc90614b35565b60405180910390fd5b61200e8161283e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806120dc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806120ec57506120eb82612d63565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166121da836115e3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000612239826120f3565b612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226f90614bc7565b60405180910390fd5b6000612283836115e3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806122f257508373ffffffffffffffffffffffffffffffffffffffff166122da846109e5565b73ffffffffffffffffffffffffffffffffffffffff16145b8061230357506123028185611e85565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661232c826115e3565b73ffffffffffffffffffffffffffffffffffffffff1614612382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237990614c59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e990614ceb565b60405180910390fd5b6123fd838383612dcd565b612408600082612167565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124589190614d0b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124af9190614586565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6125706114fa565b6125af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a690614d8b565b60405180910390fd5b6000600c60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125f361215f565b604051612600919061389f565b60405180910390a1565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050919050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080823b905060008111915050919050565b60005b81811015612705576126df600d6127c0565b6126f2836126ed600d612220565b612ee1565b80806126fd906142b5565b9150506126cd565b505050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001816000016000828254019250508190555050565b6000600880549050905090565b6001601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61290c6114fa565b1561294c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294390614df7565b60405180910390fd5b6001600c60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861299061215f565b60405161299d919061389f565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d90614e63565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612b079190613725565b60405180910390a3505050565b612b1f84848461230c565b612b2b84848484612eff565b612b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6190614ef5565b60405180910390fd5b50505050565b6060600f8054612b7f90613e2d565b80601f0160208091040260200160405190810160405280929190818152602001828054612bab90613e2d565b8015612bf85780601f10612bcd57610100808354040283529160200191612bf8565b820191906000526020600020905b815481529060010190602001808311612bdb57829003601f168201915b5050505050905090565b60606000821415612c4a576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612d5e565b600082905060005b60008214612c7c578080612c65906142b5565b915050600a82612c759190614f44565b9150612c52565b60008167ffffffffffffffff811115612c9857612c97613930565b5b6040519080825280601f01601f191660200182016040528015612cca5781602001600182028036833780820191505090505b5090505b60008514612d5757600182612ce39190614d0b565b9150600a85612cf29190614f75565b6030612cfe9190614586565b60f81b818381518110612d1457612d13614257565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612d509190614f44565b9450612cce565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612dd8838383613087565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612e1b57612e168161308c565b612e5a565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612e5957612e5883826130d5565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e9d57612e9881613242565b612edc565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612edb57612eda8282613313565b5b5b505050565b612efb828260405180602001604052806000815250613392565b5050565b6000612f208473ffffffffffffffffffffffffffffffffffffffff166133ed565b1561307a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f4961215f565b8786866040518563ffffffff1660e01b8152600401612f6b9493929190614ffb565b6020604051808303816000875af1925050508015612fa757506040513d601f19601f82011682018060405250810190612fa4919061505c565b60015b61302a573d8060008114612fd7576040519150601f19603f3d011682016040523d82523d6000602084013e612fdc565b606091505b50600081511415613022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301990614ef5565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061307f565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016130e284611730565b6130ec9190614d0b565b90506000600760008481526020019081526020016000205490508181146131d1576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506132569190614d0b565b905060006009600084815260200190815260200160002054905060006008838154811061328657613285614257565b5b9060005260206000200154905080600883815481106132a8576132a7614257565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806132f7576132f6615089565b5b6001900381819060005260206000200160009055905550505050565b600061331e83611730565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b61339c8383613400565b6133a96000848484612eff565b6133e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133df90614ef5565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346790615104565b60405180910390fd5b613479816120f3565b156134b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b090615170565b60405180910390fd5b6134c560008383612dcd565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135159190614586565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8280546135da90613e2d565b90600052602060002090601f0160209004810192826135fc5760008555613643565b82601f1061361557805160ff1916838001178555613643565b82800160010185558215613643579182015b82811115613642578251825591602001919060010190613627565b5b5090506136509190613654565b5090565b5b8082111561366d576000816000905550600101613655565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6136ba81613685565b81146136c557600080fd5b50565b6000813590506136d7816136b1565b92915050565b6000602082840312156136f3576136f261367b565b5b6000613701848285016136c8565b91505092915050565b60008115159050919050565b61371f8161370a565b82525050565b600060208201905061373a6000830184613716565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561377a57808201518184015260208101905061375f565b83811115613789576000848401525b50505050565b6000601f19601f8301169050919050565b60006137ab82613740565b6137b5818561374b565b93506137c581856020860161375c565b6137ce8161378f565b840191505092915050565b600060208201905081810360008301526137f381846137a0565b905092915050565b6000819050919050565b61380e816137fb565b811461381957600080fd5b50565b60008135905061382b81613805565b92915050565b6000602082840312156138475761384661367b565b5b60006138558482850161381c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138898261385e565b9050919050565b6138998161387e565b82525050565b60006020820190506138b46000830184613890565b92915050565b6138c38161387e565b81146138ce57600080fd5b50565b6000813590506138e0816138ba565b92915050565b600080604083850312156138fd576138fc61367b565b5b600061390b858286016138d1565b925050602061391c8582860161381c565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139688261378f565b810181811067ffffffffffffffff8211171561398757613986613930565b5b80604052505050565b600061399a613671565b90506139a6828261395f565b919050565b600067ffffffffffffffff8211156139c6576139c5613930565b5b6139cf8261378f565b9050602081019050919050565b82818337600083830152505050565b60006139fe6139f9846139ab565b613990565b905082815260208101848484011115613a1a57613a1961392b565b5b613a258482856139dc565b509392505050565b600082601f830112613a4257613a41613926565b5b8135613a528482602086016139eb565b91505092915050565b600060208284031215613a7157613a7061367b565b5b600082013567ffffffffffffffff811115613a8f57613a8e613680565b5b613a9b84828501613a2d565b91505092915050565b613aad816137fb565b82525050565b6000602082019050613ac86000830184613aa4565b92915050565b600080600060608486031215613ae757613ae661367b565b5b6000613af5868287016138d1565b9350506020613b06868287016138d1565b9250506040613b178682870161381c565b9150509250925092565b600060208284031215613b3757613b3661367b565b5b6000613b45848285016138d1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b83816137fb565b82525050565b6000613b958383613b7a565b60208301905092915050565b6000602082019050919050565b6000613bb982613b4e565b613bc38185613b59565b9350613bce83613b6a565b8060005b83811015613bff578151613be68882613b89565b9750613bf183613ba1565b925050600181019050613bd2565b5085935050505092915050565b60006020820190508181036000830152613c268184613bae565b905092915050565b613c378161370a565b8114613c4257600080fd5b50565b600081359050613c5481613c2e565b92915050565b60008060408385031215613c7157613c7061367b565b5b6000613c7f858286016138d1565b9250506020613c9085828601613c45565b9150509250929050565b600067ffffffffffffffff821115613cb557613cb4613930565b5b613cbe8261378f565b9050602081019050919050565b6000613cde613cd984613c9a565b613990565b905082815260208101848484011115613cfa57613cf961392b565b5b613d058482856139dc565b509392505050565b600082601f830112613d2257613d21613926565b5b8135613d32848260208601613ccb565b91505092915050565b60008060008060808587031215613d5557613d5461367b565b5b6000613d63878288016138d1565b9450506020613d74878288016138d1565b9350506040613d858782880161381c565b925050606085013567ffffffffffffffff811115613da657613da5613680565b5b613db287828801613d0d565b91505092959194509250565b60008060408385031215613dd557613dd461367b565b5b6000613de3858286016138d1565b9250506020613df4858286016138d1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613e4557607f821691505b60208210811415613e5957613e58613dfe565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613ebb602c8361374b565b9150613ec682613e5f565b604082019050919050565b60006020820190508181036000830152613eea81613eae565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f4d60218361374b565b9150613f5882613ef1565b604082019050919050565b60006020820190508181036000830152613f7c81613f40565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613fdf60388361374b565b9150613fea82613f83565b604082019050919050565b6000602082019050818103600083015261400e81613fd2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061404b60208361374b565b915061405682614015565b602082019050919050565b6000602082019050818103600083015261407a8161403e565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006140dd60318361374b565b91506140e882614081565b604082019050919050565b6000602082019050818103600083015261410c816140d0565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061416f602b8361374b565b915061417a82614113565b604082019050919050565b6000602082019050818103600083015261419e81614162565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006141db601f8361374b565b91506141e6826141a5565b602082019050919050565b6000602082019050818103600083015261420a816141ce565b9050919050565b600081905092915050565b50565b600061422c600083614211565b91506142378261421c565b600082019050919050565b600061424d8261421f565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142c0826137fb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142f3576142f2614286565b5b600182019050919050565b7f446f6e277420636c61696d20616761696e210000000000000000000000000000600082015250565b600061433460128361374b565b915061433f826142fe565b602082019050919050565b6000602082019050818103600083015261436381614327565b9050919050565b7f4f6e6c79206769766561776179206c6973746564210000000000000000000000600082015250565b60006143a060158361374b565b91506143ab8261436a565b602082019050919050565b600060208201905081810360008301526143cf81614393565b9050919050565b7f54686520636f6e74726163742069732070617573656421000000000000000000600082015250565b600061440c60178361374b565b9150614417826143d6565b602082019050919050565b6000602082019050818103600083015261443b816143ff565b9050919050565b7f436f6e747261637473206e6f7420616c6c6f7765640000000000000000000000600082015250565b600061447860158361374b565b915061448382614442565b602082019050919050565b600060208201905081810360008301526144a78161446b565b9050919050565b7f43616e6e6f74206d696e742066726f6d206120636f6e74726163740000000000600082015250565b60006144e4601b8361374b565b91506144ef826144ae565b602082019050919050565b60006020820190508181036000830152614513816144d7565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b600061455060148361374b565b915061455b8261451a565b602082019050919050565b6000602082019050818103600083015261457f81614543565b9050919050565b6000614591826137fb565b915061459c836137fb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145d1576145d0614286565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b600061461260148361374b565b915061461d826145dc565b602082019050919050565b6000602082019050818103600083015261464181614605565b9050919050565b7f4d617820676965766177617920737570706c7920657863656564656421000000600082015250565b600061467e601d8361374b565b915061468982614648565b602082019050919050565b600060208201905081810360008301526146ad81614671565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614710602c8361374b565b915061471b826146b4565b604082019050919050565b6000602082019050818103600083015261473f81614703565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006147a260298361374b565b91506147ad82614746565b604082019050919050565b600060208201905081810360008301526147d181614795565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614834602a8361374b565b915061483f826147d8565b604082019050919050565b6000602082019050818103600083015261486381614827565b9050919050565b6000614875826137fb565b9150614880836137fb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156148b9576148b8614286565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b60006148fa60138361374b565b9150614905826148c4565b602082019050919050565b60006020820190508181036000830152614929816148ed565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061498c602f8361374b565b915061499782614930565b604082019050919050565b600060208201905081810360008301526149bb8161497f565b9050919050565b600081905092915050565b60006149d882613740565b6149e281856149c2565b93506149f281856020860161375c565b80840191505092915050565b60008190508160005260206000209050919050565b60008154614a2081613e2d565b614a2a81866149c2565b94506001821660008114614a455760018114614a5657614a89565b60ff19831686528186019350614a89565b614a5f856149fe565b60005b83811015614a8157815481890152600182019150602081019050614a62565b838801955050505b50505092915050565b6000614a9e82866149cd565b9150614aaa82856149cd565b9150614ab68284614a13565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614b1f60268361374b565b9150614b2a82614ac3565b604082019050919050565b60006020820190508181036000830152614b4e81614b12565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614bb1602c8361374b565b9150614bbc82614b55565b604082019050919050565b60006020820190508181036000830152614be081614ba4565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000614c4360298361374b565b9150614c4e82614be7565b604082019050919050565b60006020820190508181036000830152614c7281614c36565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614cd560248361374b565b9150614ce082614c79565b604082019050919050565b60006020820190508181036000830152614d0481614cc8565b9050919050565b6000614d16826137fb565b9150614d21836137fb565b925082821015614d3457614d33614286565b5b828203905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614d7560148361374b565b9150614d8082614d3f565b602082019050919050565b60006020820190508181036000830152614da481614d68565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614de160108361374b565b9150614dec82614dab565b602082019050919050565b60006020820190508181036000830152614e1081614dd4565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614e4d60198361374b565b9150614e5882614e17565b602082019050919050565b60006020820190508181036000830152614e7c81614e40565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614edf60328361374b565b9150614eea82614e83565b604082019050919050565b60006020820190508181036000830152614f0e81614ed2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f4f826137fb565b9150614f5a836137fb565b925082614f6a57614f69614f15565b5b828204905092915050565b6000614f80826137fb565b9150614f8b836137fb565b925082614f9b57614f9a614f15565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000614fcd82614fa6565b614fd78185614fb1565b9350614fe781856020860161375c565b614ff08161378f565b840191505092915050565b60006080820190506150106000830187613890565b61501d6020830186613890565b61502a6040830185613aa4565b818103606083015261503c8184614fc2565b905095945050505050565b600081519050615056816136b1565b92915050565b6000602082840312156150725761507161367b565b5b600061508084828501615047565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006150ee60208361374b565b91506150f9826150b8565b602082019050919050565b6000602082019050818103600083015261511d816150e1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061515a601c8361374b565b915061516582615124565b602082019050919050565b600060208201905081810360008301526151898161514d565b905091905056fea26469706673582212206a62ee46be8be2c4e081c8a6d7f4637b93f31ed1fb81037bf5abe56870652b9964736f6c634300080a0033",
}

// ChibiverseABI is the input ABI used to generate the binding from.
// Deprecated: Use ChibiverseMetaData.ABI instead.
var ChibiverseABI = ChibiverseMetaData.ABI

// ChibiverseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChibiverseMetaData.Bin instead.
var ChibiverseBin = ChibiverseMetaData.Bin

// DeployChibiverse deploys a new Ethereum contract, binding an instance of Chibiverse to it.
func DeployChibiverse(auth *bind.TransactOpts, backend bind.ContractBackend, _uriPrefix string, _uriSuffix string) (common.Address, *types.Transaction, *Chibiverse, error) {
	parsed, err := ChibiverseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChibiverseBin), backend, _uriPrefix, _uriSuffix)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// Chibiverse is an auto generated Go binding around an Ethereum contract.
type Chibiverse struct {
	ChibiverseCaller     // Read-only binding to the contract
	ChibiverseTransactor // Write-only binding to the contract
	ChibiverseFilterer   // Log filterer for contract events
}

// ChibiverseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChibiverseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChibiverseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChibiverseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChibiverseSession struct {
	Contract     *Chibiverse       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChibiverseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChibiverseCallerSession struct {
	Contract *ChibiverseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ChibiverseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChibiverseTransactorSession struct {
	Contract     *ChibiverseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ChibiverseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChibiverseRaw struct {
	Contract *Chibiverse // Generic contract binding to access the raw methods on
}

// ChibiverseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChibiverseCallerRaw struct {
	Contract *ChibiverseCaller // Generic read-only contract binding to access the raw methods on
}

// ChibiverseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChibiverseTransactorRaw struct {
	Contract *ChibiverseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChibiverse creates a new instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverse(address common.Address, backend bind.ContractBackend) (*Chibiverse, error) {
	contract, err := bindChibiverse(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// NewChibiverseCaller creates a new read-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseCaller(address common.Address, caller bind.ContractCaller) (*ChibiverseCaller, error) {
	contract, err := bindChibiverse(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseCaller{contract: contract}, nil
}

// NewChibiverseTransactor creates a new write-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseTransactor(address common.Address, transactor bind.ContractTransactor) (*ChibiverseTransactor, error) {
	contract, err := bindChibiverse(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransactor{contract: contract}, nil
}

// NewChibiverseFilterer creates a new log filterer instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseFilterer(address common.Address, filterer bind.ContractFilterer) (*ChibiverseFilterer, error) {
	contract, err := bindChibiverse(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChibiverseFilterer{contract: contract}, nil
}

// bindChibiverse binds a generic wrapper to an already deployed contract.
func bindChibiverse(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChibiverseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.ChibiverseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transact(opts, method, params...)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) GIEVAWAYRESERVE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "GIEVAWAY_RESERVE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBI(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBIPURCHASE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI_PURCHASE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) PRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) PRICE() (*big.Int, error) {
	return _Chibiverse.Contract.PRICE(&_Chibiverse.CallOpts)
}

// PRICE is a free data retrieval call binding the contract method 0x8d859f3e.
//
// Solidity: function PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) PRICE() (*big.Int, error) {
	return _Chibiverse.Contract.PRICE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCaller) PROVENANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "PROVENANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCaller) Claimable(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "claimable", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCallerSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Revealed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "revealed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenURI", _tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCaller) WalletOfOwner(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "walletOfOwner", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCallerSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) AddToGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "addToGiveawayList", _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactorSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactor) Mint(opts *bind.TransactOpts, _mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "mint", _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactorSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) RemoveGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "removeGiveawayList", _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactor) SetHiddenMetadataUri(opts *bind.TransactOpts, _hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setHiddenMetadataUri", _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactor) SetRevealed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setRevealed")
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactorSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriPrefix(opts *bind.TransactOpts, _uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriPrefix", _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriSuffix(opts *bind.TransactOpts, _uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriSuffix", _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// ChibiverseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Chibiverse contract.
type ChibiverseApprovalIterator struct {
	Event *ChibiverseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApproval represents a Approval event raised by the Chibiverse contract.
type ChibiverseApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ChibiverseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalIterator{contract: _Chibiverse.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ChibiverseApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApproval)
				if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseApproval(log types.Log) (*ChibiverseApproval, error) {
	event := new(ChibiverseApproval)
	if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Chibiverse contract.
type ChibiverseApprovalForAllIterator struct {
	Event *ChibiverseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApprovalForAll represents a ApprovalForAll event raised by the Chibiverse contract.
type ChibiverseApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ChibiverseApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalForAllIterator{contract: _Chibiverse.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ChibiverseApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApprovalForAll)
				if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) ParseApprovalForAll(log types.Log) (*ChibiverseApprovalForAll, error) {
	event := new(ChibiverseApprovalForAll)
	if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Chibiverse contract.
type ChibiverseOwnershipTransferredIterator struct {
	Event *ChibiverseOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseOwnershipTransferred represents a OwnershipTransferred event raised by the Chibiverse contract.
type ChibiverseOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ChibiverseOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseOwnershipTransferredIterator{contract: _Chibiverse.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ChibiverseOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseOwnershipTransferred)
				if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) ParseOwnershipTransferred(log types.Log) (*ChibiverseOwnershipTransferred, error) {
	event := new(ChibiverseOwnershipTransferred)
	if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiversePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Chibiverse contract.
type ChibiversePausedIterator struct {
	Event *ChibiversePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiversePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiversePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiversePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiversePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiversePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiversePaused represents a Paused event raised by the Chibiverse contract.
type ChibiversePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterPaused(opts *bind.FilterOpts) (*ChibiversePausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ChibiversePausedIterator{contract: _Chibiverse.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ChibiversePaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiversePaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) ParsePaused(log types.Log) (*ChibiversePaused, error) {
	event := new(ChibiversePaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Chibiverse contract.
type ChibiverseTransferIterator struct {
	Event *ChibiverseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseTransfer represents a Transfer event raised by the Chibiverse contract.
type ChibiverseTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ChibiverseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransferIterator{contract: _Chibiverse.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ChibiverseTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseTransfer)
				if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseTransfer(log types.Log) (*ChibiverseTransfer, error) {
	event := new(ChibiverseTransfer)
	if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Chibiverse contract.
type ChibiverseUnpausedIterator struct {
	Event *ChibiverseUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseUnpaused represents a Unpaused event raised by the Chibiverse contract.
type ChibiverseUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ChibiverseUnpausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ChibiverseUnpausedIterator{contract: _Chibiverse.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ChibiverseUnpaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseUnpaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) ParseUnpaused(log types.Log) (*ChibiverseUnpaused, error) {
	event := new(ChibiverseUnpaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
