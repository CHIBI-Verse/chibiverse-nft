// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package chibiverse

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChibiverseMetaData contains all meta data concerning the Chibiverse contract.
var ChibiverseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHIBI_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CHIBI_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GIEVAWAY_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIEVAWAY_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeGiveawayList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ChibiverseABI is the input ABI used to generate the binding from.
// Deprecated: Use ChibiverseMetaData.ABI instead.
var ChibiverseABI = ChibiverseMetaData.ABI

// ChibiverseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChibiverseMetaData.Bin instead.
var ChibiverseBin = ChibiverseMetaData.Bin

// DeployChibiverse deploys a new Ethereum contract, binding an instance of Chibiverse to it.
func DeployChibiverse(auth *bind.TransactOpts, backend bind.ContractBackend, _uriPrefix string, _uriSuffix string, _hiddenMetadataUri string) (common.Address, *types.Transaction, *Chibiverse, error) {
	parsed, err := ChibiverseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChibiverseBin), backend, _uriPrefix, _uriSuffix, _hiddenMetadataUri)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// Chibiverse is an auto generated Go binding around an Ethereum contract.
type Chibiverse struct {
	ChibiverseCaller     // Read-only binding to the contract
	ChibiverseTransactor // Write-only binding to the contract
	ChibiverseFilterer   // Log filterer for contract events
}

// ChibiverseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChibiverseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChibiverseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChibiverseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChibiverseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChibiverseSession struct {
	Contract     *Chibiverse       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ChibiverseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChibiverseCallerSession struct {
	Contract *ChibiverseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ChibiverseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChibiverseTransactorSession struct {
	Contract     *ChibiverseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ChibiverseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChibiverseRaw struct {
	Contract *Chibiverse // Generic contract binding to access the raw methods on
}

// ChibiverseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChibiverseCallerRaw struct {
	Contract *ChibiverseCaller // Generic read-only contract binding to access the raw methods on
}

// ChibiverseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChibiverseTransactorRaw struct {
	Contract *ChibiverseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChibiverse creates a new instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverse(address common.Address, backend bind.ContractBackend) (*Chibiverse, error) {
	contract, err := bindChibiverse(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Chibiverse{ChibiverseCaller: ChibiverseCaller{contract: contract}, ChibiverseTransactor: ChibiverseTransactor{contract: contract}, ChibiverseFilterer: ChibiverseFilterer{contract: contract}}, nil
}

// NewChibiverseCaller creates a new read-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseCaller(address common.Address, caller bind.ContractCaller) (*ChibiverseCaller, error) {
	contract, err := bindChibiverse(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseCaller{contract: contract}, nil
}

// NewChibiverseTransactor creates a new write-only instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseTransactor(address common.Address, transactor bind.ContractTransactor) (*ChibiverseTransactor, error) {
	contract, err := bindChibiverse(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransactor{contract: contract}, nil
}

// NewChibiverseFilterer creates a new log filterer instance of Chibiverse, bound to a specific deployed contract.
func NewChibiverseFilterer(address common.Address, filterer bind.ContractFilterer) (*ChibiverseFilterer, error) {
	contract, err := bindChibiverse(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChibiverseFilterer{contract: contract}, nil
}

// bindChibiverse binds a generic wrapper to an already deployed contract.
func bindChibiverse(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChibiverseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.ChibiverseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.ChibiverseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Chibiverse *ChibiverseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Chibiverse.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Chibiverse *ChibiverseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Chibiverse *ChibiverseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Chibiverse.Contract.contract.Transact(opts, method, params...)
}

// CHIBIPRICE is a free data retrieval call binding the contract method 0x78d7ab09.
//
// Solidity: function CHIBI_PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) CHIBIPRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "CHIBI_PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHIBIPRICE is a free data retrieval call binding the contract method 0x78d7ab09.
//
// Solidity: function CHIBI_PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) CHIBIPRICE() (*big.Int, error) {
	return _Chibiverse.Contract.CHIBIPRICE(&_Chibiverse.CallOpts)
}

// CHIBIPRICE is a free data retrieval call binding the contract method 0x78d7ab09.
//
// Solidity: function CHIBI_PRICE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) CHIBIPRICE() (*big.Int, error) {
	return _Chibiverse.Contract.CHIBIPRICE(&_Chibiverse.CallOpts)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) GIEVAWAYRESERVE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "GIEVAWAY_RESERVE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// GIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x7dd8c8c1.
//
// Solidity: function GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) GIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.GIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBI(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBI is a free data retrieval call binding the contract method 0x3750d1dc.
//
// Solidity: function MAX_CHIBI() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBI() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBI(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXCHIBIPURCHASE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_CHIBI_PURCHASE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// MAXCHIBIPURCHASE is a free data retrieval call binding the contract method 0xd1702683.
//
// Solidity: function MAX_CHIBI_PURCHASE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXCHIBIPURCHASE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXCHIBIPURCHASE(&_Chibiverse.CallOpts)
}

// MAXGIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x9e9ac322.
//
// Solidity: function MAX_GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) MAXGIEVAWAYRESERVE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "MAX_GIEVAWAY_RESERVE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXGIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x9e9ac322.
//
// Solidity: function MAX_GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseSession) MAXGIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXGIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// MAXGIEVAWAYRESERVE is a free data retrieval call binding the contract method 0x9e9ac322.
//
// Solidity: function MAX_GIEVAWAY_RESERVE() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) MAXGIEVAWAYRESERVE() (*big.Int, error) {
	return _Chibiverse.Contract.MAXGIEVAWAYRESERVE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCaller) PROVENANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "PROVENANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// PROVENANCE is a free data retrieval call binding the contract method 0x6373a6b1.
//
// Solidity: function PROVENANCE() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) PROVENANCE() (string, error) {
	return _Chibiverse.Contract.PROVENANCE(&_Chibiverse.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Chibiverse.Contract.BalanceOf(&_Chibiverse.CallOpts, owner)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCaller) Claimable(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "claimable", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address _address) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Claimable(_address common.Address) (bool, error) {
	return _Chibiverse.Contract.Claimable(&_Chibiverse.CallOpts, _address)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.GetApproved(&_Chibiverse.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Chibiverse.Contract.IsApprovedForAll(&_Chibiverse.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Name() (string, error) {
	return _Chibiverse.Contract.Name(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Chibiverse *ChibiverseCallerSession) Owner() (common.Address, error) {
	return _Chibiverse.Contract.Owner(&_Chibiverse.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Chibiverse *ChibiverseCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Chibiverse.Contract.OwnerOf(&_Chibiverse.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Paused() (bool, error) {
	return _Chibiverse.Contract.Paused(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCaller) Revealed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "revealed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// Revealed is a free data retrieval call binding the contract method 0x51830227.
//
// Solidity: function revealed() view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) Revealed() (bool, error) {
	return _Chibiverse.Contract.Revealed(&_Chibiverse.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Chibiverse *ChibiverseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Chibiverse.Contract.SupportsInterface(&_Chibiverse.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Chibiverse *ChibiverseCallerSession) Symbol() (string, error) {
	return _Chibiverse.Contract.Symbol(&_Chibiverse.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenByIndex(&_Chibiverse.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Chibiverse.Contract.TokenOfOwnerByIndex(&_Chibiverse.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "tokenURI", _tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_Chibiverse *ChibiverseCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _Chibiverse.Contract.TokenURI(&_Chibiverse.CallOpts, _tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Chibiverse *ChibiverseCallerSession) TotalSupply() (*big.Int, error) {
	return _Chibiverse.Contract.TotalSupply(&_Chibiverse.CallOpts)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCaller) WalletOfOwner(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Chibiverse.contract.Call(opts, &out, "walletOfOwner", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address _owner) view returns(uint256[])
func (_Chibiverse *ChibiverseCallerSession) WalletOfOwner(_owner common.Address) ([]*big.Int, error) {
	return _Chibiverse.Contract.WalletOfOwner(&_Chibiverse.CallOpts, _owner)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) AddToGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "addToGiveawayList", _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// AddToGiveawayList is a paid mutator transaction binding the contract method 0x5d8e52b7.
//
// Solidity: function addToGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) AddToGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.AddToGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Approve(&_Chibiverse.TransactOpts, to, tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Chibiverse *ChibiverseTransactorSession) Claim() (*types.Transaction, error) {
	return _Chibiverse.Contract.Claim(&_Chibiverse.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactor) Mint(opts *bind.TransactOpts, _mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "mint", _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 _mintAmount) payable returns()
func (_Chibiverse *ChibiverseTransactorSession) Mint(_mintAmount *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.Mint(&_Chibiverse.TransactOpts, _mintAmount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Pause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Pause(&_Chibiverse.TransactOpts)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactor) RemoveGiveawayList(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "removeGiveawayList", _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RemoveGiveawayList is a paid mutator transaction binding the contract method 0x65ac8230.
//
// Solidity: function removeGiveawayList(address _address) returns()
func (_Chibiverse *ChibiverseTransactorSession) RemoveGiveawayList(_address common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.RemoveGiveawayList(&_Chibiverse.TransactOpts, _address)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Chibiverse *ChibiverseTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Chibiverse.Contract.RenounceOwnership(&_Chibiverse.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Chibiverse *ChibiverseTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Chibiverse.Contract.SafeTransferFrom0(&_Chibiverse.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetApprovalForAll(&_Chibiverse.TransactOpts, operator, approved)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactor) SetHiddenMetadataUri(opts *bind.TransactOpts, _hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setHiddenMetadataUri", _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetHiddenMetadataUri is a paid mutator transaction binding the contract method 0x4fdd43cb.
//
// Solidity: function setHiddenMetadataUri(string _hiddenMetadataUri) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetHiddenMetadataUri(_hiddenMetadataUri string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetHiddenMetadataUri(&_Chibiverse.TransactOpts, _hiddenMetadataUri)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactor) SetRevealed(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setRevealed")
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetRevealed is a paid mutator transaction binding the contract method 0x3bd64968.
//
// Solidity: function setRevealed() returns()
func (_Chibiverse *ChibiverseTransactorSession) SetRevealed() (*types.Transaction, error) {
	return _Chibiverse.Contract.SetRevealed(&_Chibiverse.TransactOpts)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriPrefix(opts *bind.TransactOpts, _uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriPrefix", _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriPrefix is a paid mutator transaction binding the contract method 0x7ec4a659.
//
// Solidity: function setUriPrefix(string _uriPrefix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriPrefix(_uriPrefix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriPrefix(&_Chibiverse.TransactOpts, _uriPrefix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactor) SetUriSuffix(opts *bind.TransactOpts, _uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "setUriSuffix", _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// SetUriSuffix is a paid mutator transaction binding the contract method 0x16ba10e0.
//
// Solidity: function setUriSuffix(string _uriSuffix) returns()
func (_Chibiverse *ChibiverseTransactorSession) SetUriSuffix(_uriSuffix string) (*types.Transaction, error) {
	return _Chibiverse.Contract.SetUriSuffix(&_Chibiverse.TransactOpts, _uriSuffix)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferFrom(&_Chibiverse.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Chibiverse *ChibiverseTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Chibiverse.Contract.TransferOwnership(&_Chibiverse.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Chibiverse *ChibiverseTransactorSession) Unpause() (*types.Transaction, error) {
	return _Chibiverse.Contract.Unpause(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Chibiverse.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Chibiverse *ChibiverseTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Chibiverse.Contract.Withdraw(&_Chibiverse.TransactOpts)
}

// ChibiverseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Chibiverse contract.
type ChibiverseApprovalIterator struct {
	Event *ChibiverseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApproval represents a Approval event raised by the Chibiverse contract.
type ChibiverseApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ChibiverseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalIterator{contract: _Chibiverse.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ChibiverseApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApproval)
				if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseApproval(log types.Log) (*ChibiverseApproval, error) {
	event := new(ChibiverseApproval)
	if err := _Chibiverse.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Chibiverse contract.
type ChibiverseApprovalForAllIterator struct {
	Event *ChibiverseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseApprovalForAll represents a ApprovalForAll event raised by the Chibiverse contract.
type ChibiverseApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ChibiverseApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseApprovalForAllIterator{contract: _Chibiverse.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ChibiverseApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseApprovalForAll)
				if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Chibiverse *ChibiverseFilterer) ParseApprovalForAll(log types.Log) (*ChibiverseApprovalForAll, error) {
	event := new(ChibiverseApprovalForAll)
	if err := _Chibiverse.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Chibiverse contract.
type ChibiverseOwnershipTransferredIterator struct {
	Event *ChibiverseOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseOwnershipTransferred represents a OwnershipTransferred event raised by the Chibiverse contract.
type ChibiverseOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ChibiverseOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseOwnershipTransferredIterator{contract: _Chibiverse.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ChibiverseOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseOwnershipTransferred)
				if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Chibiverse *ChibiverseFilterer) ParseOwnershipTransferred(log types.Log) (*ChibiverseOwnershipTransferred, error) {
	event := new(ChibiverseOwnershipTransferred)
	if err := _Chibiverse.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiversePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Chibiverse contract.
type ChibiversePausedIterator struct {
	Event *ChibiversePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiversePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiversePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiversePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiversePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiversePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiversePaused represents a Paused event raised by the Chibiverse contract.
type ChibiversePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterPaused(opts *bind.FilterOpts) (*ChibiversePausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ChibiversePausedIterator{contract: _Chibiverse.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ChibiversePaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiversePaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Chibiverse *ChibiverseFilterer) ParsePaused(log types.Log) (*ChibiversePaused, error) {
	event := new(ChibiversePaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Chibiverse contract.
type ChibiverseTransferIterator struct {
	Event *ChibiverseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseTransfer represents a Transfer event raised by the Chibiverse contract.
type ChibiverseTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ChibiverseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ChibiverseTransferIterator{contract: _Chibiverse.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ChibiverseTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseTransfer)
				if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Chibiverse *ChibiverseFilterer) ParseTransfer(log types.Log) (*ChibiverseTransfer, error) {
	event := new(ChibiverseTransfer)
	if err := _Chibiverse.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ChibiverseUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Chibiverse contract.
type ChibiverseUnpausedIterator struct {
	Event *ChibiverseUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChibiverseUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChibiverseUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChibiverseUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChibiverseUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChibiverseUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChibiverseUnpaused represents a Unpaused event raised by the Chibiverse contract.
type ChibiverseUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ChibiverseUnpausedIterator, error) {

	logs, sub, err := _Chibiverse.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ChibiverseUnpausedIterator{contract: _Chibiverse.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ChibiverseUnpaused) (event.Subscription, error) {

	logs, sub, err := _Chibiverse.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChibiverseUnpaused)
				if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Chibiverse *ChibiverseFilterer) ParseUnpaused(log types.Log) (*ChibiverseUnpaused, error) {
	event := new(ChibiverseUnpaused)
	if err := _Chibiverse.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
